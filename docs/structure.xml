<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../" display="com.apamax.functional" name="com.apamax.functional"><Type category="Event" name="Functional"><Description><![CDATA[Wrapper event for usage of Fn in a fluent style. Contains instance methods for operators, static methods for creation, all of which return values wrapped in a Functional for further calls. Functors and predicates are still used from Fn. The underlying value can be retrieved at the end of the chain with the <tt>get</tt> action.

 eg: <tt>Functional.count().filter(Fn.even)).map((integer i)->i*2).slice(2, 8, 2);</tt>

 You can create a Functional either using one of the static methods, or by wrapping a sequence, dictionary or generator directly.

 eg: <tt>Functional([1,2,3,4]).filter(Fn.even).reduce(Fn.sum)</tt>]]></Description><Summary><![CDATA[Wrapper event for usage of Fn in a fluent style. Contains instance methods for operators, static methods for creation, all of which return values wrapped in a Functional for further calls. Functors and predicates are still used from Fn. The underlying value can be retrieved at the end of the chain with the <tt>get</tt> action.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="container" private="true" type="any"><Description/><Summary/><TypeParameters/></Member><Action name="reduce" staticNature=""><Description><![CDATA[Accumulates all of the contents using an accumulator function, returning the final result.

 Works on a sequence or a dictionary. The result is the actual value, not a Functional, since it's no longer a container.

 eg: <tt>numbers.reduce((integer a, integer i)->a+i)</tt>

 Semantics are as <tt>Fn.reduce</tt>]]></Description><Summary><![CDATA[Accumulates all of the contents using an accumulator function, returning the final result.]]></Summary><TypeParameters/><See reference="Fn.reduce"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[The final result of the accumulator function.]]></Description></Returns><Parameters><Parameter name="func" type="any"><Description><![CDATA[An accumulator function or lambda.]]></Description></Parameter></Parameters></Action><Action name="generatorFrom" staticNature="static "><Description><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value.

 eg: <tt>Functional.generatorFrom(100, (integer i)->i+1)</tt>]]></Description><Summary><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value.]]></Summary><TypeParameters/><See reference="Fn.generator"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A generator for <tt>TYPE</tt>, wrapped in a functional.]]></Description></Returns><Parameters><Parameter name="start" type="any"><Description><![CDATA[The value to pass to func to generate the first generation.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[An <tt>action&lt;TYPE&gt; returns TYPE</tt> action or lambda which takes the previous value and returns the next value.]]></Description></Parameter></Parameters></Action><Action name="count" staticNature="static "><Description><![CDATA[Returns a Functional generator producing sequential integers with the first one being 0.]]></Description><Summary><![CDATA[Returns a Functional generator producing sequential integers with the first one being 0.]]></Summary><TypeParameters/><See reference="Fn.count"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"/></Action><Action name="generator" staticNature="static "><Description><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value. The initial value will be a default-initialized <tt>TYPE</tt> and the result of first generation will be the result of invoking <tt>func</tt> on that default-initialized value. To specify the initial value, use generateFrom.

 eg: <tt>Functional.generator((integer i)->i+1)</tt>]]></Description><Summary><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value. The initial value will be a default-initialized <tt>TYPE</tt> and the result of first generation will be the result of invoking <tt>func</tt> on that default-initialized value. To specify the initial value, use generateFrom.]]></Summary><TypeParameters/><See reference="Fn.generator"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A generator for <tt>TYPE</tt>, wrapped in a Functional.]]></Description></Returns><Parameters><Parameter name="func" type="any"><Description><![CDATA[An <tt>action&lt;TYPE&gt; returns TYPE</tt> action or lambda which takes the previous value and returns the next value.]]></Description></Parameter></Parameters></Action><Action name="range" staticNature="static "><Description><![CDATA[Returns a Functional range of integers from <tt>start</tt> (inclusive) to <tt>end</tt> (exclusive), incrementing <tt>stride</tt> each time.]]></Description><Summary><![CDATA[Returns a Functional range of integers from <tt>start</tt> (inclusive) to <tt>end</tt> (exclusive), incrementing <tt>stride</tt> each time.]]></Summary><TypeParameters/><See reference="Fn.range"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"/><Parameters><Parameter name="start" type="integer"/><Parameter name="end" type="integer"/><Parameter name="stride" type="integer"/></Parameters></Action><Action name="sequenceOf" staticNature="static "><Description><![CDATA[Returns a sequence containing the given item the given number of times.]]></Description><Summary><![CDATA[Returns a sequence containing the given item the given number of times.]]></Summary><TypeParameters/><See reference="Fn.sequenceOf"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A <tt>sequence&lt;ITEMTYPE&gt;</tt> with <tt>n</tt> <tt>item</tt>s in it, wrapped in a Functional.]]></Description></Returns><Parameters><Parameter name="item" type="any"><Description><![CDATA[The element to put in the sequence.]]></Description></Parameter><Parameter name="n" type="integer"><Description><![CDATA[The number of times to repeat the element.]]></Description></Parameter></Parameters></Action><Action name="cycle" staticNature="static "><Description><![CDATA[Iterates through a sequence of items and continues looping forever.]]></Description><Summary><![CDATA[Iterates through a sequence of items and continues looping forever.]]></Summary><TypeParameters/><See reference="Fn.cycle"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A generator which iterates over <tt>seq</tt>, wrapped in a Functional]]></Description></Returns><Parameters><Parameter name="seq" type="any"><Description><![CDATA[The sequence of values to iterate over]]></Description></Parameter></Parameters></Action><Action name="filter" staticNature=""><Description><![CDATA[Filters the contents using a boolean predicate func.

 Works on dictionary, sequence or generator.

 eg: <tt>numbers.filter((integer i)->i%2=0)</tt>

 Semantics are as <tt>Fn.filter</tt>]]></Description><Summary><![CDATA[Filters the contents using a boolean predicate func.]]></Summary><TypeParameters/><See reference="Fn.filter"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A Functional container filtered using the predicate function.]]></Description></Returns><Parameters><Parameter name="func" type="any"><Description><![CDATA[A boolean predicate function or lambda.]]></Description></Parameter></Parameters></Action><Action name="slice" staticNature=""><Description><![CDATA[Returns a given sub-range as a finite sequence.

 Works on sequence or generator. If it is a generator, it will invoke the generator sufficient times immediately to satisfy the slice.

 eg: <tt>numbers.slice(5, 20, 2)</tt>]]></Description><Summary><![CDATA[Returns a given sub-range as a finite sequence.]]></Summary><TypeParameters/><See reference="Fn.slice"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A Functional containing the selected range of values.]]></Description></Returns><Parameters><Parameter name="start" type="integer"><Description><![CDATA[The first item to return.]]></Description></Parameter><Parameter name="end" type="integer"><Description><![CDATA[The last item to return (-1 = all, only permitted for sequences).]]></Description></Parameter><Parameter name="stride" type="integer"><Description><![CDATA[The number of items to increment each time (1 = all).]]></Description></Parameter></Parameters></Action><Action name="get" staticNature=""><Description><![CDATA[Return the wrapped container.]]></Description><Summary><![CDATA[Return the wrapped container.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/></Action><Action name="repeat" staticNature="static "><Description><![CDATA[Repeats the given element forever.]]></Description><Summary><![CDATA[Repeats the given element forever.]]></Summary><TypeParameters/><See reference="Fn.repeat"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A generator which returns item over and over again, wrapped in a Functional.]]></Description></Returns><Parameters><Parameter name="item" type="any"><Description><![CDATA[The item to return.]]></Description></Parameter></Parameters></Action><Action name="accumulate" staticNature=""><Description><![CDATA[Returns a generator which accumulates over the underlying container, returning the result after accumulating each item. Similar to reduce, but returns a generator for each item in turn, rather than just the final total.]]></Description><Summary><![CDATA[Returns a generator which accumulates over the underlying container, returning the result after accumulating each item. Similar to reduce, but returns a generator for each item in turn, rather than just the final total.]]></Summary><TypeParameters/><See reference="Fn.accumulate"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[A generator which returns each accumulated item in turn, wrapped in a Functional.]]></Description></Returns><Parameters><Parameter name="func" type="any"><Description><![CDATA[An <tt>action&lt;TYPEB,TYPEA&gt; returns TYPEB</tt> action or lambda which accumulates each item in turn and returns the new total.]]></Description></Parameter></Parameters></Action><Action name="argmap" staticNature=""><Description><![CDATA[Use the contents as a list of arguments with which to invoke a function.

 Works on a sequence or a generator.

 These inner sequences will be treated as a list of arguments to the given function, or a single argument to that function. Each item in the result will be the result of calling func with the next set of arguments.]]></Description><Summary><![CDATA[Use the contents as a list of arguments with which to invoke a function.]]></Summary><TypeParameters/><See reference="Fn.argmap"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"/><Parameters><Parameter name="func" type="any"><Description><![CDATA[A function which takes each item in container and returns a result.]]></Description></Parameter></Parameters></Action><Action name="map" staticNature=""><Description><![CDATA[Maps the contents using a function.

 Works on dictionary, sequence or generator.

 eg: <tt>numbers.map((integer i)->i*2)</tt>

 Semantics are as <tt>Fn.map</tt>]]></Description><Summary><![CDATA[Maps the contents using a function.]]></Summary><TypeParameters/><See reference="Fn.map"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Functional"><Description><![CDATA[The container with all the values run through func.]]></Description></Returns><Parameters><Parameter name="func" type="any"><Description><![CDATA[A function or lambda from old value type to new value type.]]></Description></Parameter></Parameters></Action><Action name="generate" staticNature=""><Description><![CDATA[If this Functional is wrapping a generator, generate one item with the underlying generator and return it.

 Only works on generators.]]></Description><Summary><![CDATA[If this Functional is wrapping a generator, generate one item with the underlying generator and return it.]]></Summary><TypeParameters/><See reference="Generator.generate"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[The next item from the wrapped generator.]]></Description></Returns></Action></Type><Type category="Event" name="Partial"><Description><![CDATA[A partially evaluated function which can be passed to functional operators or later executed with the remaining arguments.

 eg: <tt>Partial p := Fn.partial(concatFn, "Hello"); &lt;string&gt;p.exec(" world");</tt>]]></Description><Summary><![CDATA[A partially evaluated function which can be passed to functional operators or later executed with the remaining arguments.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="args" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="curriedArgs" private="true" type="integer"><Description/><Summary/><TypeParameters/></Member><Member name="func" private="true" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><Description/><Summary/><TypeParameters/></Member><Member name="retType" private="true" type="string"><Description/><Summary/><TypeParameters/></Member><Member name="nArgs" private="true" type="integer"><Description/><Summary/><TypeParameters/></Member><Action name="getFuncReturnType" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="create" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Partial"/><Parameters><Parameter name="arguments" type="any"/><Parameter name="func" type="any"/></Parameters></Action><Action name="execGeneric" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="args" type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters></Action><Action name="partial" staticNature=""><Description><![CDATA[Add more partial arguments and return a new Partial which wraps this one.]]></Description><Summary><![CDATA[Add more partial arguments and return a new Partial which wraps this one.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Partial"/><Parameters><Parameter name="arguments" type="any"/></Parameters></Action><Action name="getNumberOfArgs" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="exec" staticNature=""><Description><![CDATA[Execute the underlying function, passing in the remaining arguments.]]></Description><Summary><![CDATA[Execute the underlying function, passing in the remaining arguments.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[The result of executing the underlying function with the original and remaining arguments.]]></Description></Returns><Parameters><Parameter name="args" type="any"><Description><![CDATA[The remaining single argument, or sequence of all remaining arguments.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="GenerateWrap" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="wrapped" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="func" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="wrappedargs" type="sequence"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="args" type="sequence"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="retType" type="string"><TypeParameters/></Member><Action name="getFuncReturnType" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="create" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="GenerateWrap"/><Parameters><Parameter name="wrapped" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/></Parameter><Parameter name="func" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/></Parameter><Parameter name="retType" type="string"/></Parameters></Action><Action name="generate" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="_" type="any"/></Parameters></Action></Type><Type category="Event" name="Fn"><Description><![CDATA[Provides functional operations on EPL containers, such as map, reduce, filter and slice.

 Also provides generators which can be used as input to the functional operations.

 eg: <tt>Fn.slice(Fn.map(Fn.filter(Fn.count(), (integer i)->i%2=0), (integer i)->i*2), 2, 8, 2);</tt>]]></Description><Summary><![CDATA[Provides functional operations on EPL containers, such as map, reduce, filter and slice.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="_any" staticNature="static "><Description><![CDATA[Logical 'OR' over a sequence of booleans]]></Description><Summary><![CDATA[Logical 'OR' over a sequence of booleans]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="seq" type="any"><Description><![CDATA[sequence<any> of booleans. Return false iff none of the items in the sequence are true.  If seq is empty, returns false.]]></Description></Parameter></Parameters></Action><Action name="mul" staticNature="static "><Description><![CDATA[Action for multiplying together the values in a sequence or generator of integer, float or decimal using accumulate or reduce.

 eg: <tt>integer product := Fn.reduce(numbers, Fn.mul);</tt>]]></Description><Summary><![CDATA[Action for multiplying together the values in a sequence or generator of integer, float or decimal using accumulate or reduce.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="acc" type="any"/><Parameter name="i" type="any"/></Parameters></Action><Action name="generator" staticNature="static "><Description><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value. The initial value will be a default-initialized <tt>TYPE</tt> and the result of first generation will be the result of invoking <tt>func</tt> on that default-initialized value. To specify the initial value, use generateFrom.

 eg: <tt>Fn.generator((integer i)->i+1)</tt>]]></Description><Summary><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value. The initial value will be a default-initialized <tt>TYPE</tt> and the result of first generation will be the result of invoking <tt>func</tt> on that default-initialized value. To specify the initial value, use generateFrom.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"><Description><![CDATA[A generator for <tt>TYPE</tt>.]]></Description></Returns><Parameters><Parameter name="func" type="any"><Description><![CDATA[An <tt>action&lt;TYPE&gt; returns TYPE</tt> action or lambda which takes the previous value and returns the next value.]]></Description></Parameter></Parameters></Action><Action name="increment" staticNature="static "><Description><![CDATA[Increments the given integer]]></Description><Summary><![CDATA[Increments the given integer]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="i" type="integer"/></Parameters></Action><Action name="range" staticNature="static "><Description><![CDATA[Returns a range of integers from <tt>start</tt> (inclusive) to <tt>end</tt> (exclusive), incrementing <tt>stride</tt> each time.]]></Description><Summary><![CDATA[Returns a range of integers from <tt>start</tt> (inclusive) to <tt>end</tt> (exclusive), incrementing <tt>stride</tt> each time.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="integer"/></Parameters></Returns><Parameters><Parameter name="start" type="integer"/><Parameter name="end" type="integer"/><Parameter name="stride" type="integer"/></Parameters></Action><Action name="sequenceOf" staticNature="static "><Description><![CDATA[Returns a sequence containing the given item the given number of times.]]></Description><Summary><![CDATA[Returns a sequence containing the given item the given number of times.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[A <tt>sequence&lt;ITEMTYPE&gt;</tt> with <tt>n</tt> <tt>item</tt>s in it.]]></Description></Returns><Parameters><Parameter name="item" type="any"><Description><![CDATA[The element to put in the sequence.]]></Description></Parameter><Parameter name="n" type="integer"><Description><![CDATA[The number of times to repeat the element.]]></Description></Parameter></Parameters></Action><Action name="sum" staticNature="static "><Description><![CDATA[Action for adding up a sequence or generator of integer, float or decimal using accumulate or reduce.

 eg: <tt>integer sum := Fn.reduce(numbers, Fn.sum);</tt>]]></Description><Summary><![CDATA[Action for adding up a sequence or generator of integer, float or decimal using accumulate or reduce.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="acc" type="any"/><Parameter name="i" type="any"/></Parameters></Action><Action name="whole" staticNature="static "><Description><![CDATA[A predicate which returns true if the argument is a whole number.]]></Description><Summary><![CDATA[A predicate which returns true if the argument is a whole number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="i" type="any"/></Parameters></Action><Action name="cycle" staticNature="static "><Description><![CDATA[Iterates through a sequence of items and continues looping forever.]]></Description><Summary><![CDATA[Iterates through a sequence of items and continues looping forever.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"><Description><![CDATA[A generator which iterates over <tt>seq</tt>]]></Description></Returns><Parameters><Parameter name="seq" type="any"><Description><![CDATA[The sequence of values to iterate over]]></Description></Parameter></Parameters></Action><Action name="_all" staticNature="static "><Description><![CDATA[Logical 'AND' over a sequence of booleans]]></Description><Summary><![CDATA[Logical 'AND' over a sequence of booleans]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="seq" type="any"><Description><![CDATA[sequence<any> of booleans. Return true iff none of the items in the sequence are false.  If seq is empty, returns true.]]></Description></Parameter></Parameters></Action><Action name="istrue" staticNature="static "><Description><![CDATA[A predicate which returns true if the argument is true.]]></Description><Summary><![CDATA[A predicate which returns true if the argument is true.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="b" type="boolean"/></Parameters></Action><Action name="negative" staticNature="static "><Description><![CDATA[A predicate which returns true if the argument is negative.]]></Description><Summary><![CDATA[A predicate which returns true if the argument is negative.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="i" type="any"/></Parameters></Action><Action name="slice" staticNature="static "><Description><![CDATA[Takes either a sequence or a generator and returns a given sub-range as a finite sequence. If it is passed a generator, it will invoke the generator sufficient times immediately to satisfy the slice.

 eg: <tt>Fn.slice(numbers, 5, 20, 2)</tt>]]></Description><Summary><![CDATA[Takes either a sequence or a generator and returns a given sub-range as a finite sequence. If it is passed a generator, it will invoke the generator sufficient times immediately to satisfy the slice.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[A <tt>sequence&lt;TYPE&gt;</tt> containing the selected values from <tt>container</tt>]]></Description></Returns><Parameters><Parameter name="container" type="any"><Description><![CDATA[A <tt>sequence&lt;TYPE&gt;</tt> or generator which produces <tt>TYPE</tt>.]]></Description></Parameter><Parameter name="start" type="integer"><Description><![CDATA[The first item to return.]]></Description></Parameter><Parameter name="end" type="integer"><Description><![CDATA[The last item to return (-1 = all, only permitted for sequences).]]></Description></Parameter><Parameter name="stride" type="integer"><Description><![CDATA[The number of items to increment each time (1 = all).]]></Description></Parameter></Parameters></Action><Action name="identity" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="repeat" staticNature="static "><Description><![CDATA[Repeats the given element forever.]]></Description><Summary><![CDATA[Repeats the given element forever.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"><Description><![CDATA[A generator which returns item over and over again.]]></Description></Returns><Parameters><Parameter name="item" type="any"><Description><![CDATA[The item to return.]]></Description></Parameter></Parameters></Action><Action name="accumulate" staticNature="static "><Description><![CDATA[Returns a generator which accumulates over the underlying container, returning the result after accumulating each item. Similar to reduce, but returns a generator for each item in turn, rather than just the final total. The initial value of the accumulator is the default value of func's return type (<tt>TYPEB</tt>).]]></Description><Summary><![CDATA[Returns a generator which accumulates over the underlying container, returning the result after accumulating each item. Similar to reduce, but returns a generator for each item in turn, rather than just the final total. The initial value of the accumulator is the default value of func's return type (<tt>TYPEB</tt>).]]></Summary><TypeParameters/><See reference="reduce"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"><Description><![CDATA[A generator which returns each accumulated item in turn.]]></Description></Returns><Parameters><Parameter name="container" type="any"><Description><![CDATA[The sequence, dictionary or generator to accumulate.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[An <tt>action&lt;TYPEB,TYPEA&gt; returns TYPEB</tt> action or lambda which accumulates each item in turn and returns the new total.]]></Description></Parameter></Parameters></Action><Action name="map" staticNature="static "><Description><![CDATA[Takes either a sequence, a dictionary or a generator and maps the contents using a function.

 eg: <tt>Fn.map(numbers, (integer i)->i*2)</tt>

 Specifically, given: <ul> <li><tt>sequence&lt;TYPEA&gt; container</tt> and <tt>action&lt;TYPEA&gt; returns TYPEB func</tt> will return <tt>sequence&lt;TYPEB&gt;</tt> containing the result of running <tt>func</tt> on all the elements in <tt>container</tt>.</li> <li><tt>dictionary&lt;KEYTYPE,VALUETYPEA&gt; container</tt> and <tt>action&lt;KEYTYPE,VALUETYPEA&gt; returns VALUETYPEB func</tt> will return <tt>dictionary&lt;KEYTYPE,VALUETYPEB&gt;</tt> containing the keys from <tt>container</tt> with the values being the result of running <tt>func</tt>.</li> <li>A generator returning <tt>TYPEA</tt> and <tt>action&lt;TYPEA&gt; returns TYPEB func</tt> will return a generator returning <tt>TYPEB</tt> where each item is the corresponding item from the original generator after running <tt>func</tt>.</li> </ul>]]></Description><Summary><![CDATA[Takes either a sequence, a dictionary or a generator and maps the contents using a function.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"><Description><![CDATA[The container with all the values run through func.]]></Description></Returns><Parameters><Parameter name="container" type="any"><Description><![CDATA[A sequence, dictionary or generator.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[A function or lambda from old value type to new value type.]]></Description></Parameter></Parameters></Action><Action name="reduce" staticNature="static "><Description><![CDATA[Takes either a sequence or a dictionary and accumulates all of the values using an accumulator function, returning the final result.

 eg: <tt>Fn.reduce(numbers, (integer a, integer i)->a+i)</tt>

 Specifically, given: <ul> <li><tt>sequence&lt;TYPEA&gt; container</tt> and <tt>action&lt;TYPEB,TYPEA&gt; returns TYPEB func</tt> will return the final <tt>TYPEB</tt> after calling <tt>func</tt> on each value, retaining <tt>TYPEB</tt> each time.</li> <li><tt>dictionary&lt;KEYTYPE,VALUETYPE&gt; container</tt> and <tt>action&lt;TYPEB,KEYTYPE,VALUETYPE&gt; returns TYPEB func</tt> will return the final <tt>TYPEB</tt> after calling <tt>func</tt> on each key and value, retaining <tt>TYPEB</tt> each time.</li> </ul>]]></Description><Summary><![CDATA[Takes either a sequence or a dictionary and accumulates all of the values using an accumulator function, returning the final result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[The final result of the accumulator function.]]></Description></Returns><Parameters><Parameter name="container" type="any"><Description><![CDATA[A sequence or dictionary.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[An accumulator function or lambda.]]></Description></Parameter></Parameters></Action><Action name="generatorFrom" staticNature="static "><Description><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value.

 eg: <tt>Fn.generatorFrom(100, (integer i)->i+1)</tt>]]></Description><Summary><![CDATA[Create a generator from a function, which is passed the previous value and should return the next value.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"><Description><![CDATA[A generator for <tt>TYPE</tt>.]]></Description></Returns><Parameters><Parameter name="start" type="any"><Description><![CDATA[The value to pass to func to generate the first generation.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[An <tt>action&lt;TYPE&gt; returns TYPE</tt> action or lambda which takes the previous value and returns the next value.]]></Description></Parameter></Parameters></Action><Action name="count" staticNature="static "><Description><![CDATA[Returns a generator producing sequential integers with the first one being 0.]]></Description><Summary><![CDATA[Returns a generator producing sequential integers with the first one being 0.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"/></Action><Action name="concat" staticNature="static "><Description><![CDATA[Action which concatenates strings using accumulate or reduce.]]></Description><Summary><![CDATA[Action which concatenates strings using accumulate or reduce.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="acc" type="string"/><Parameter name="i" type="string"/></Parameters></Action><Action name="positive" staticNature="static "><Description><![CDATA[A predicate which returns true if the argument is positive (not including 0).]]></Description><Summary><![CDATA[A predicate which returns true if the argument is positive (not including 0).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="i" type="any"/></Parameters></Action><Action name="anytrue" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="acc" type="boolean"/><Parameter name="b" type="boolean"/></Parameters></Action><Action name="odd" staticNature="static "><Description><![CDATA[A predicate which returns true if the argument is odd.]]></Description><Summary><![CDATA[A predicate which returns true if the argument is odd.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="i" type="integer"/></Parameters></Action><Action name="filter" staticNature="static "><Description><![CDATA[Takes either a sequence, a dictionary or a generator and filters the contents using a boolean predicate func.

 eg: <tt>Fn.filter(numbers, (integer i)->i%2=0)</tt>

 Specifically, given: <ul> <li><tt>sequence&lt;TYPE&gt; container</tt> and <tt>action&lt;TYPE&gt; returns boolean func</tt> will return <tt>sequence&lt;TYPE&gt;</tt> containing all the elements for which <tt>func</tt> returned true.</li> <li><tt>dictionary&lt;KEYTYPE,VALUETYPE&gt; container</tt> and <tt>action&lt;KEYTYPE,VALUETYPE&gt; returns boolean func</tt> will return <tt>dictionary&lt;KEYTYPE,VALUETYPE&gt;</tt> containing all the elements for which <tt>func</tt> returned true.</li> <li>A generator returning <tt>TYPE</tt> and <tt>action&lt;TYPE&gt; returns boolean func</tt> will return a generator returning <tt>TYPE</tt> which only generates items from the original generator for which <tt>func</tt> returned true.</li> </ul>]]></Description><Summary><![CDATA[Takes either a sequence, a dictionary or a generator and filters the contents using a boolean predicate func.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"><Description><![CDATA[The container filtered using the predicate function.]]></Description></Returns><Parameters><Parameter name="container" type="any"><Description><![CDATA[A sequence, dictionary or generator.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[A boolean predicate function or lambda.]]></Description></Parameter></Parameters></Action><Action name="reduceFrom" staticNature="static "><Description><![CDATA[Takes either a sequence or a dictionary and accumulates all of the values using an accumulator function, returning the final result.

 eg: <tt>Fn.reduceFrom(42, numbers, (integer a, integer i)->a+i)</tt>

 Specifically, given: <ul> <li><tt>sequence&lt;TYPEA&gt; container</tt> and <tt>action&lt;TYPEB,TYPEA&gt; returns TYPEB func</tt> will return the final <tt>TYPEB</tt> after calling <tt>func</tt> on each value, retaining <tt>TYPEB</tt> each time.</li> <li><tt>dictionary&lt;KEYTYPE,VALUETYPE&gt; container</tt> and <tt>action&lt;TYPEB,KEYTYPE,VALUETYPE&gt; returns TYPEB func</tt> will return the final <tt>TYPEB</tt> after calling <tt>func</tt> on each key and value, retaining <tt>TYPEB</tt> each time.</li> </ul>]]></Description><Summary><![CDATA[Takes either a sequence or a dictionary and accumulates all of the values using an accumulator function, returning the final result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[The final result of the accumulator function.]]></Description></Returns><Parameters><Parameter name="accumulator" type="any"><Description><![CDATA[initial value, of <tt>TYPEB</tt>]]></Description></Parameter><Parameter name="container" type="any"><Description><![CDATA[A sequence or dictionary.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[An accumulator function or lambda.]]></Description></Parameter></Parameters></Action><Action name="anyfalse" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="acc" type="boolean"/><Parameter name="b" type="boolean"/></Parameters></Action><Action name="even" staticNature="static "><Description><![CDATA[A predicate which returns true if the argument is even.]]></Description><Summary><![CDATA[A predicate which returns true if the argument is even.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="i" type="integer"/></Parameters></Action><Action name="_not" staticNature="static "><Description><![CDATA[A predicate which inverts the value of another predicate.]]></Description><Summary><![CDATA[A predicate which inverts the value of another predicate.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="boolean"/></Returns><Parameters><Parameter name="pred" type="any"/></Parameters></Action><Action name="argmap" staticNature="static "><Description><![CDATA[Iterates through a sequence, or a generator and uses the result as a list of arguments with which to invoke a function. These inner sequences will be treated as a list of arguments to the given function, or a single argument to that function. Each generated item will be the result of calling func with the next set of arguments.]]></Description><Summary><![CDATA[Iterates through a sequence, or a generator and uses the result as a list of arguments with which to invoke a function. These inner sequences will be treated as a list of arguments to the given function, or a single argument to that function. Each generated item will be the result of calling func with the next set of arguments.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="container" type="any"><Description><![CDATA[A sequence or a generator.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[A function which takes each item in container and returns a result.]]></Description></Parameter></Parameters></Action><Action name="accumulateFrom" staticNature="static "><Description><![CDATA[Returns a generator which accumulates over the underlying container, returning the result after accumulating each item. Similar to reduce, but returns a generator for each item in turn, rather than just the final total.]]></Description><Summary><![CDATA[Returns a generator which accumulates over the underlying container, returning the result after accumulating each item. Similar to reduce, but returns a generator for each item in turn, rather than just the final total.]]></Summary><TypeParameters/><See reference="reduceFrom"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"><Description><![CDATA[A generator which returns each accumulated item in turn.]]></Description></Returns><Parameters><Parameter name="start" type="any"><Description><![CDATA[The initial value of the accumulator; must have the same type as func's return type (<tt>TYPEB</tt>).]]></Description></Parameter><Parameter name="container" type="any"><Description><![CDATA[The sequence, dictionary or generator to accumulate.]]></Description></Parameter><Parameter name="func" type="any"><Description><![CDATA[An <tt>action&lt;TYPEB,TYPEA&gt; returns TYPEB</tt> action or lambda which accumulates each item in turn and returns the new total.]]></Description></Parameter></Parameters></Action><Action name="partial" staticNature="static "><Description><![CDATA[Partially execute a function, providing some arguments, to be later executed with the remaining arguments. Arguments must be provided left-to-right for the function call to be invoked. eg: <tt>Partial p := Fn.partial(concatFn, "Hello"); &lt;string&gt;p.exec(" world");</tt> Partial objects can be passed to any of the other actions on Fn where an action would be expected.]]></Description><Summary><![CDATA[Partially execute a function, providing some arguments, to be later executed with the remaining arguments. Arguments must be provided left-to-right for the function call to be invoked. eg: <tt>Partial p := Fn.partial(concatFn, "Hello"); &lt;string&gt;p.exec(" world");</tt> Partial objects can be passed to any of the other actions on Fn where an action would be expected.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Partial"/><Parameters><Parameter name="func" type="any"><Description><![CDATA[A function (including an earlier partial()) to execute once all arguments are provided.]]></Description></Parameter><Parameter name="args" type="any"><Description><![CDATA[The arguments to store for later execution. May be a single argument, or a sequence of several arguments.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="GenerateIf" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="wrapped" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="predicate" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="wrappedargs" type="sequence"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="args" type="sequence"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="retType" type="string"><TypeParameters/></Member><Action name="getFuncReturnType" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="create" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="GenerateIf"/><Parameters><Parameter name="wrapped" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/></Parameter><Parameter name="predicate" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/></Parameter><Parameter name="retType" type="string"/></Parameters></Action><Action name="generate" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="_" type="any"/></Parameters></Action></Type><Type category="Event" name="SequenceCycleGenerator" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="seq" type="any"><TypeParameters/></Member><Member name="index" type="integer"><TypeParameters/></Member><Member name="seqsize" type="integer"><TypeParameters/></Member><Member name="retType" type="string"><TypeParameters/></Member><Action name="getFuncReturnType" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="create" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="seq" type="any"/></Parameters></Action><Action name="generate" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="_" type="any"/></Parameters></Action></Type><Type category="Event" name="Util" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="getFuncReturnType" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="func" type="any"/></Parameters></Action><Action name="returnTypeInstanceOf" staticNature="static "><Description><![CDATA[Return a new default instance of the return type of the function.]]></Description><Summary><![CDATA[Return a new default instance of the return type of the function.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="func" type="any"/></Parameters></Action><Action name="getGenericSequence" staticNature="static "><Description><![CDATA[Convert value(s) of arg to a sequence<any> containing the value(s). If arg is not a sequence, create the sequence and put the value in it. If arg is already a sequence, copy the values from the sequence.]]></Description><Summary><![CDATA[Convert value(s) of arg to a sequence<any> containing the value(s). If arg is not a sequence, create the sequence and put the value in it. If arg is already a sequence, copy the values from the sequence.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="any"/></Parameters></Returns><Parameters><Parameter name="arg" type="any"/></Parameters></Action><Action name="getGenericAction" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="func" type="any"/></Parameters></Action><Action name="getNumberOfArgs" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="func" type="any"/></Parameters></Action></Type><Type category="Event" name="ArgMapGenerator" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="func" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="source" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="args" type="sequence"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="retType" type="string"><TypeParameters/></Member><Action name="getFuncReturnType" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="create" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="ArgMapGenerator"/><Parameters><Parameter name="source" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/></Parameter><Parameter name="func" type="any"/></Parameters></Action><Action name="generate" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="_" type="any"/></Parameters></Action></Type><Type category="Event" name="NotPred" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="pred" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="args" type="sequence"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Action name="execute" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="i" type="any"/></Parameters></Action></Type><Type category="Event" name="AccumulateGenerator" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="container" type="any"><TypeParameters/></Member><Member name="func" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><TypeParameters/></Member><Member name="args" type="sequence"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="acc" type="any"><TypeParameters/></Member><Member name="index" type="any"><TypeParameters/></Member><Member name="retType" type="string"><TypeParameters/></Member><Action name="createFrom" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="AccumulateGenerator"/><Parameters><Parameter name="start" type="any"/><Parameter name="container" type="any"/><Parameter name="func" type="any"/></Parameters></Action><Action name="getFuncReturnType" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="create" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="AccumulateGenerator"/><Parameters><Parameter name="container" type="any"/><Parameter name="func" type="any"/></Parameters></Action><Action name="generate" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="_" type="any"/></Parameters></Action></Type><Type category="Event" name="Generator"><Description><![CDATA[Represents a generator over a function. This class is used internally by Functional, but you can use any event with a generate method. Generate methods must take 0 arguments and can return the type of your choice (or any).]]></Description><Summary><![CDATA[Represents a generator over a function. This class is used internally by Functional, but you can use any event with a generate method. Generate methods must take 0 arguments and can return the type of your choice (or any).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="accumulator" private="true" type="any"><Description/><Summary/><TypeParameters/></Member><Member name="func" private="true" type="action"><Parameters><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Returns type="any"/><Description/><Summary/><TypeParameters/></Member><Member name="args" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="retType" private="true" type="string"><Description/><Summary/><TypeParameters/></Member><Action name="getFuncReturnType" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="create" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.functional" type="Generator"/><Parameters><Parameter name="start" type="any"/><Parameter name="func" type="any"/></Parameters></Action><Action name="generate" staticNature=""><Description><![CDATA[Returns the next item from this generator.]]></Description><Summary><![CDATA[Returns the next item from this generator.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[The next item.]]></Description></Returns></Action></Type></Package></Packages>