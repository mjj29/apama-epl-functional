package com.apamax.test;
using com.apamax.functional.Fn;
using com.apamax.functional.Generator;
using com.apamax.functional.Util;
using com.apamax.functional.Functional;

/** This monitor is responsible for ...  */
monitor TestFn {

	event Zeros
	{
		action generate() returns integer {
			return 0;
		}
	}
	action onload()
	{
		testmap();
		testfilter();
		testreduce();
		testgenerators();
		testcustom();
		testaccumulate();
		testargmap();
	}
	action testmap()
	{
		Asserts.assertEquals("map sequence string",
			Functional(["Hello World", "Foo bar"]).map(replaceWithCows).get(),
			["cow", "cow"]);

		Asserts.assertEquals("map sequence integer",
			Functional([1, 2, 3]).map(replaceWithCows).get(),
			["cow", "cow", "cow"]);

		Asserts.assertEquals("map dictionary",
			Functional({"Hello world":1, "Foo":2}).map(replaceValueWithCows).get(),
			{"Hello world":"cow", "Foo":"cow"});
	}
	action testfilter()
	{
		Asserts.assertEquals("filter sequence",
			Functional(["cow", "notacow", "cow", "cow", "notacow"]).filter(checkForCow).get(),
			["cow", "cow", "cow"]);

		Asserts.assertEquals("filter dictionary",
			Functional({"Hello world":"cow", "Foo":"cow", "baz":"quux", "to be or":"not to be"}).filter(checkValueForCow).get(),
			{"Hello world":"cow", "Foo":"cow"});
	}
	action testreduce()
	{
		Asserts.assertEquals("reduce sequence", Functional([1,3,5,7,9]).reduce(Fn.sum), 25);

		Asserts.assertEquals("reduce dictionary", Functional({"a":2, "b":4, "c":5}).reduce(stringify), "a:2, b:4, c:5, ");
	}
	action testgenerators()
	{
		Functional f := Functional.count();
		Asserts.assertEquals("generate 0", 0, f.generate());
		Asserts.assertEquals("generate 1", 1, f.generate());
		Asserts.assertEquals("generate 2", 2, f.generate());

		f := f.filter(Fn.even);
		Asserts.assertEquals("generate filter 4", 4, f.generate());
		Asserts.assertEquals("generate filter 6", 6, f.generate());
		Asserts.assertEquals("generate filter 8", 8, f.generate());

		f := f.map(Fn.partial(Fn.mul, 2));
		Asserts.assertEquals("generate map 20", 20, f.generate());
		Asserts.assertEquals("generate map 24", 24, f.generate());
		Asserts.assertEquals("generate map 28", 28, f.generate());

		f := Functional.generator(addCow);
		Asserts.assertEquals("generate cow", "cow", f.generate());
		Asserts.assertEquals("generate cowcow", "cowcow", f.generate());
		Asserts.assertEquals("generate cowcowcow", "cowcowcow", f.generate());

		f := f.map(countCows);
		Asserts.assertEquals("generate cow map 4", 4, f.generate());
		Asserts.assertEquals("generate cow map 5", 5, f.generate());
		Asserts.assertEquals("generate cow map 6", 6, f.generate());

		Asserts.assertEquals("generate slice", f.slice(1,5,2).get(),  [8, 10]);
		Asserts.assertEquals("sequence slice", Functional(["a", "b", "c", "d", "e", "f", "g"]).slice(2, -1, 3).get(), ["c", "f"]);
	}
	action testcustom()
	{
		Functional f := Functional(new Zeros);
		Asserts.assertEquals("zeros", 0, f.generate());
		Asserts.assertEquals("zeros", 0, f.generate());
		Asserts.assertEquals("zeros", 0, f.generate());
		f := f.map(replaceWithCows);
		Asserts.assertEquals("zero map", "cow", f.generate());
		Asserts.assertEquals("zero map", "cow", f.generate());
		Asserts.assertEquals("zero map", "cow", f.generate());
	}
	action testaccumulate()
	{
		Functional f := Functional([3,5,7,9]).accumulate(Fn.sum);
		Asserts.assertEquals("accumulate seq 1", 3, f.generate());
		Asserts.assertEquals("accumulate seq 2", 8, f.generate());
		Asserts.assertEquals("accumulate seq 3", 15, f.generate());
		Asserts.assertEquals("accumulate seq 4", 24, f.generate());

		f := Functional.count().accumulate(Fn.sum);
		Asserts.assertEquals("accumulate gen 0", 0, f.generate());
		Asserts.assertEquals("accumulate gen 1", 1, f.generate());
		Asserts.assertEquals("accumulate gen 2", 3, f.generate());
		Asserts.assertEquals("accumulate gen 3", 6, f.generate());
		Asserts.assertEquals("accumulate gen 4", 10, f.generate());
	}
	action testargmap()
	{
		Asserts.assertEquals("argmap single seq", Functional([0,1,2]).argmap(Fn.partial(Fn.mul,2)).slice(0, 3, 1).get(), [0,2,4]);
		Asserts.assertEquals("argmap single gen", Functional.count().argmap(Fn.partial(Fn.mul,2)).slice(0, 3, 1).get(), [0,2,4]);
		Asserts.assertEquals("argmap multiple seq", Functional([[1,2],[3,4],[5,6]]).argmap(Fn.sum).slice(0, 3, 1).get(), [3,7,11]);
	}

	action replaceWithCows(any a) returns string { return "cow"; }
	action replaceValueWithCows(string k, any v) returns string { return "cow"; }
	action checkForCow(string s) returns boolean { return s = "cow"; }
	action checkValueForCow(string k, string v) returns boolean { return v = "cow"; }
	action stringify(string acc, string k, integer v) returns string { return acc+k+":"+v.toString()+", "; }
	action addCow(string s) returns string { return s+"cow"; }
	action countCows(string s) returns integer
	{
		integer i := 0;
		integer offs := -1;
		while true {
			offs := s.findFrom("cow", offs+1);
			if offs < 0 { break; }
			i := i + 1;
		}
		return i;
	}
}

