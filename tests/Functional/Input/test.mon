package com.apamax.test;
using com.apamax.functional.Fn;
using com.apamax.functional.Generator;
using com.apamax.functional.Util;

/** This monitor is responsible for ...  */
monitor TestFn {

	event Zeros
	{
		action generate() returns integer {
			return 0;
		}
	}
	action onload()
	{
		testmap();
		testfilter();
		testreduce();
		testgenerators();
		testcustom();
		testrange();
		testsequenceof();
		testaccumulate();
		testsum();
		testmul();
		testconcat();
		testeven();
		testutil();
		testcycle();
		testfloatpredicates();
		testargmap();
		testboolpredicates();
	}
	action testmap()
	{
		sequence<string> s := ["Hello World", "Foo bar"];
		s := <sequence<string>> Fn.map(s, replaceWithCows/* (any a) -> "cow" */);
		Asserts.assertEquals("map sequence string", s, ["cow", "cow"]);

		sequence<integer> s2 := [1, 2, 3];
		s := <sequence<string>> Fn.map(s2, replaceWithCows/* (any a) -> "cow" */);
		Asserts.assertEquals("map sequence integer", s, ["cow", "cow", "cow"]);

		dictionary<string, integer> d := {"Hello world":1, "Foo":2};

		Asserts.assertEquals("map dictionary 2arg", <dictionary<string,string>>Fn.map(d, replaceValueWithCows/* (string k, any v) -> "cow" */), {"Hello world":"cow", "Foo":"cow"});
		Asserts.assertEquals("map dictionary 1arg", Fn.map(d, replaceWithCows/* (string k, any v) -> "cow" */), {"Hello world":"cow", "Foo":"cow"});
	}
	action testfilter()
	{
		sequence<string> s := ["cow", "notacow", "cow", "cow", "notacow"];
		s := <sequence<string>> Fn.filter(s, checkForCow/* (string s) -> s="cow" */);
		Asserts.assertEquals("filter sequence", s, ["cow", "cow", "cow"]);

		dictionary<string, string> d := {"Hello world":"cow", "Foo":"cow", "baz":"quux", "to be or":"not to be"};
		Asserts.assertEquals("filter dictionary 2args", Fn.filter(d, checkValueForCow/* (string k, string v) -> v="cow" */), {"Hello world":"cow", "Foo":"cow"});
		Asserts.assertEquals("filter dictionary 1arg", Fn.filter(d, checkForCow/* (string v) -> v="cow" */), {"Hello world":"cow", "Foo":"cow"});
	}
	action testreduce()
	{
		sequence<integer> si := [1,3,5,7,9];
		float sum := <float> Fn.reduce(si, addup/* (float a, integer v) -> acc+v.toFloat() */);
		Asserts.assertEquals("reduce sequence", sum, 25.);

		dictionary<string, integer> dsi := {"a":2, "b":4, "c":5};
		string dstr := <string> Fn.reduce(dsi, stringify/* (string a, string k, integer v) -> acc+k+":"+v.toString()+", " */);
		Asserts.assertEquals("reduce dictionary 2args", dstr, "a:2, b:4, c:5, ");
		Asserts.assertEquals("reduce dictionary 1arg", Fn.reduce(dsi, Fn.sum), 11);
	}
	action testgenerators()
	{
		Generator g := Fn.count();
		Asserts.assertEquals("generate 0", 0, g.generate());
		Asserts.assertEquals("generate 1", 1, g.generate());
		Asserts.assertEquals("generate 2", 2, g.generate());

		g := <Generator> Fn.filter(g, isEven/*(integer i)->i%2=0 */);
		Asserts.assertEquals("generate filter 4", 4, g.generate());
		Asserts.assertEquals("generate filter 6", 6, g.generate());
		Asserts.assertEquals("generate filter 8", 8, g.generate());

		g := <Generator> Fn.map(g, double/* (integer i)->i*2 */);
		Asserts.assertEquals("generate map 20", 20, g.generate());
		Asserts.assertEquals("generate map 24", 24, g.generate());
		Asserts.assertEquals("generate map 28", 28, g.generate());

		g := Fn.generator(addCow/* (string s) -> s+"cow" */);
		Asserts.assertEquals("generate cow", "cow", g.generate());
		Asserts.assertEquals("generate cowcow", "cowcow", g.generate());
		Asserts.assertEquals("generate cowcowcow", "cowcowcow", g.generate());

		g := <Generator> Fn.map(g, countCows);
		Asserts.assertEquals("generate cow map 4", 4, g.generate());
		Asserts.assertEquals("generate cow map 5", 5, g.generate());
		Asserts.assertEquals("generate cow map 6", 6, g.generate());

		sequence<integer> ncows := <sequence<integer>> Fn.slice(g, 1, 5, 2);
		Asserts.assertEquals("generate slice", ncows,  [8, 10]);
		sequence<string> ss := <sequence<string>> Fn.slice(["a", "b", "c", "d", "e", "f", "g"], 2, -1, 3);
		Asserts.assertEquals("sequence slice", ss, ["c", "f"]);
	}
	action testcustom()
	{
		Zeros z := new Zeros;
		Asserts.assertEquals("zeros", 0, z.generate());
		Asserts.assertEquals("zeros", 0, z.generate());
		Asserts.assertEquals("zeros", 0, z.generate());
		Generator g := <Generator> Fn.map(z, replaceWithCows);
		Asserts.assertEquals("zero map", "cow", g.generate());
		Asserts.assertEquals("zero map", "cow", g.generate());
		Asserts.assertEquals("zero map", "cow", g.generate());
	}
	action testrange() {
		Asserts.assertEquals("range zero 1", [0,1,2,3,4], Fn.range(0, 5, 1));
		Asserts.assertEquals("range positive 1", [7,8,9], Fn.range(7, 10, 1));
		Asserts.assertEquals("range positive 3", [6,9,12], Fn.range(6, 13, 3));
		Asserts.assertEquals("range negative 1", [-6, -5, -4], Fn.range(-6, -3, 1));
		Asserts.assertEquals("range cross 2", [-4, -2, 0, 2, 4], Fn.range(-4, 6, 2));
	}
	action testsequenceof()
	{
		Asserts.assertEquals("sequenceOf", ["cow", "cow", "cow"], Fn.sequenceOf("cow", 3));
	}
	action testaccumulate()
	{
		Generator g := Fn.accumulate([3,5,7,9], addup/* (float a, integer i)->a+i */);
		Asserts.assertEquals("accumulate seq 1", 3., g.generate());
		Asserts.assertEquals("accumulate seq 2", 8., g.generate());
		Asserts.assertEquals("accumulate seq 3", 15., g.generate());
		Asserts.assertEquals("accumulate seq 4", 24., g.generate());

		g := Fn.accumulateFrom(10., [3,5,7,9], addup/* (float a, integer i)->a+i */);
		Asserts.assertEquals("accumulateFrom seq 1", 13., g.generate());
		Asserts.assertEquals("accumulateFrom seq 2", 18., g.generate());
		Asserts.assertEquals("accumulateFrom seq 3", 25., g.generate());
		Asserts.assertEquals("accumulateFrom seq 4", 34., g.generate());

		g := Fn.accumulate(Fn.count(), addup/* (float a, integer i)->a+i */);
		Asserts.assertEquals("accumulate gen 0", 0., g.generate());
		Asserts.assertEquals("accumulate gen 1", 1., g.generate());
		Asserts.assertEquals("accumulate gen 2", 3., g.generate());
		Asserts.assertEquals("accumulate gen 3", 6., g.generate());
		Asserts.assertEquals("accumulate gen 4", 10., g.generate());

		g := Fn.accumulateFrom(100., Fn.count(), addup/* (float a, integer i)->a+i */);
		Asserts.assertEquals("accumulateFrom gen 0", 100., g.generate());
		Asserts.assertEquals("accumulateFrom gen 1", 101., g.generate());
		Asserts.assertEquals("accumulateFrom gen 2", 103., g.generate());

	}
	action testsum()
	{
		Asserts.assertEquals("sum seq int", Fn.reduce([2,4,6], Fn.sum), 12);
		Asserts.assertEquals("sum seq float", Fn.reduce([2.1,4.2,6.3], Fn.sum), 12.6);
		Asserts.assertEquals("sum seq dec", Fn.reduce([2.3d,4.2d,6.1d], Fn.sum), 12.6d);

		Generator g := Fn.accumulate(Fn.count(), Fn.sum);
		Asserts.assertEquals("sum gen 0", 0, g.generate());
		Asserts.assertEquals("sum gen 1", 1, g.generate());
		Asserts.assertEquals("sum gen 2", 3, g.generate());
		Asserts.assertEquals("sum gen 3", 6, g.generate());
		Asserts.assertEquals("sum gen 4", 10, g.generate());
	}
	action testmul()
	{
		Asserts.assertEquals("mul seq int", Fn.reduce([2,4,6], Fn.mul), 48);
		Asserts.assertEquals("mul seq float", Fn.reduce([2.1,4.2,6.3], Fn.mul), 55.566);
		Asserts.assertEquals("mul seq dec", Fn.reduce([2.3d,4.2d,6.1d], Fn.mul), 58.926d);

		Generator g := Fn.count();
		any _ := g.generate();
		g := Fn.accumulate(g, Fn.mul);
		Asserts.assertEquals("mul gen 0", 1, g.generate());
		Asserts.assertEquals("mul gen 1", 2, g.generate());
		Asserts.assertEquals("mul gen 2", 6, g.generate());
		Asserts.assertEquals("mul gen 3", 24, g.generate());
		Asserts.assertEquals("mul gen 4", 120, g.generate());
	}
	action testconcat()
	{
		Asserts.assertEquals("concat seq str", Fn.reduce(["A","B","C"], Fn.concat), "ABC");

		Generator g := Fn.accumulate(Fn.repeat("A"), Fn.concat);
		Asserts.assertEquals("mul gen A", "A", g.generate());
		Asserts.assertEquals("mul gen AA", "AA", g.generate());
		Asserts.assertEquals("mul gen AAA", "AAA", g.generate());
	}
	action testcycle()
	{
		Generator g := Fn.cycle([1,2,3]);
		Asserts.assertEquals("cycle 1", 1, g.generate());
		Asserts.assertEquals("cycle 2", 2, g.generate());
		Asserts.assertEquals("cycle 3", 3, g.generate());
		Asserts.assertEquals("cycle 4", 1, g.generate());
		Asserts.assertEquals("cycle 5", 2, g.generate());
	}
	action testeven()
	{
		Asserts.assertEquals("even seq", Fn.filter([1,2,3,4,5,6], Fn.even), [2,4,6]);
		Asserts.assertEquals("even seq", Fn.filter([1,2,3,4,5,6], Fn.odd), [1,3,5]);

		Generator g := <Generator> Fn.filter(Fn.count(), Fn.even);
		Asserts.assertEquals("even gen 1", 0, g.generate());
		Asserts.assertEquals("even gen 2", 2, g.generate());
		Asserts.assertEquals("even gen 3", 4, g.generate());
		g := <Generator> Fn.filter(Fn.count(), Fn.odd);
		Asserts.assertEquals("even gen 1", 1, g.generate());
		Asserts.assertEquals("even gen 2", 3, g.generate());
		Asserts.assertEquals("even gen 3", 5, g.generate());
	}
	action testfloatpredicates()
	{
		Asserts.assertEquals("positive int", Fn.filter([-2,1,0,-1,2], Fn.positive), [1,2]);
		Asserts.assertEquals("positive float", Fn.filter([-float.INFINITY,-2.1,0.,1.2,-1.3,2.4,float.PI,float.INFINITY], Fn.positive), [1.2,2.4,float.PI,float.INFINITY]);
		Asserts.assertEquals("positive decimal", Fn.filter([-decimal.INFINITY,-2.1d,0.d,1.2d,-1.3d,2.4d,decimal.PI,decimal.INFINITY], Fn.positive), [1.2d,2.4d,decimal.PI,decimal.INFINITY]);

		Asserts.assertEquals("not negative int", Fn.filter([-2,1,0,-1,2], Fn._not(Fn.negative)), [1,0,2]);
		Asserts.assertEquals("not negative float", Fn.filter([-float.INFINITY,-2.1,1.2,0.,-1.3,2.4,float.PI,float.INFINITY], Fn._not(Fn.negative)), [1.2,0.,2.4,float.PI,float.INFINITY]);
		Asserts.assertEquals("not negative decimal", Fn.filter([-decimal.INFINITY,-2.1d,1.2d,0.d,-1.3d,2.4d,decimal.PI,decimal.INFINITY], Fn._not(Fn.negative)), [1.2d,0.d,2.4d,decimal.PI,decimal.INFINITY]);

		Asserts.assertEquals("negative int", Fn.filter([-2,1,0,-1,2], Fn.negative), [-2,-1]);
		Asserts.assertEquals("negative float", Fn.filter([-float.INFINITY,-2.1,1.2,0.,-1.3,2.4,float.PI,float.INFINITY], Fn.negative), [-float.INFINITY,-2.1,-1.3]);
		Asserts.assertEquals("negative decimal", Fn.filter([-decimal.INFINITY,-2.1d,1.2d,0.d,-1.3d,2.4d,decimal.PI,decimal.INFINITY], Fn.negative), [-decimal.INFINITY,-2.1d,-1.3d]);

		Asserts.assertEquals("whole int", Fn.filter([0,-1,2], Fn.whole), [0,-1,2]);
		Asserts.assertEquals("whole float", Fn.filter([0.,-1.,0.5,float.E], Fn.whole), [0.,-1.]);
		Asserts.assertEquals("whole decimal", Fn.filter([0.d,-1.d,0.5d,decimal.E], Fn.whole), [0.d,-1.d]);
	}

	action testargmap()
	{
		Asserts.assertEquals("argmap single seq", Fn.slice(Fn.argmap([0,1,2], double), 0, 3, 1), [0,2,4]);
		Asserts.assertEquals("argmap single gen", Fn.slice(Fn.argmap(Fn.count(), double), 0, 3, 1), [0,2,4]);
		Asserts.assertEquals("argmap multiple seq", Fn.slice(Fn.argmap([[<any>1.,2],[<any>3.,4],[<any>5.,6]], addup), 0, 3, 1), [3.,7.,11.]);
	}

	action testutil()
	{
		Asserts.assertEquals("ggs int", [<any>1], Util.getGenericSequence(1));
		Asserts.assertEquals("ggs seq", [<any>1], Util.getGenericSequence([1]));
		Asserts.assertEquals("ggs any seq", [<any>1], Util.getGenericSequence([<any>1]));
		Asserts.assertEquals("ggs mixed seq", [<any>1,"hello"], Util.getGenericSequence([<any>1,"hello"]));
		Asserts.assertEquals("ggs int seq", [<any>1,2], Util.getGenericSequence([1,2]));
		Asserts.assertEquals("ggs mixed seq /w [seq]", [<any>1.,2,[3]], Util.getGenericSequence([<any>1.,2,[3]]));
		Asserts.assertEquals("ggs new any", new sequence<any>, Util.getGenericSequence(new any));
		Asserts.assertEquals("ggs dict", [<any>{"a":1}], Util.getGenericSequence({"a":1}));
		Asserts.assertEquals("ggs dict [seq]", [<any>{"A":[1]}], Util.getGenericSequence({"A":[1]}));
		Asserts.assertEquals("ggs event", [<any>new Fn], Util.getGenericSequence(new Fn));
		//
		// any l := Fn.partial;
		// any r := Fn.partial;
		// if l = r {	// Comparison of actions throws IllegalArgumentException
		// 	log "l=r";
		// }
		//
		// These asserts require comparison of actions, so we cannot demonstrate that getGenericSequence() works:
		//
		// Asserts.assertEquals("ggs event action", [<any>Fn.partial], Util.getGenericSequence(Fn.partial));
		// Asserts.assertEquals("ggs monitor action", [<any>onload], Util.getGenericSequence(onload));
	}

	action testboolpredicates()
	{
		Asserts.assertEquals("istrue(t)", true, Fn.istrue(true));
		Asserts.assertEquals("istrue(f)", false, Fn.istrue(false));

		Asserts.assertEquals("_all(t,t)", true, Fn._all([true, true]));
		Asserts.assertEquals("_all(t,f)", false, Fn._all([true, false]));
		Asserts.assertEquals("_all(f,t)", false, Fn._all([false, true]));
		Asserts.assertEquals("_all(f,f)", false, Fn._all([false, false]));
		Asserts.assertEquals("_all(f)", false, Fn._all([false]));
		Asserts.assertEquals("_all(t)", true, Fn._all([true]));
		Asserts.assertEquals("_all([])", true, Fn._all(new sequence<boolean>));
		Asserts.assertEquals("_all([<any>])", true, Fn._all(new sequence<any>));

		Asserts.assertEquals("_any(t,t)", true, Fn._any([true, true]));
		Asserts.assertEquals("_any(t,f)", true, Fn._any([true, false]));
		Asserts.assertEquals("_any(f,t)", true, Fn._any([false, true]));
		Asserts.assertEquals("_any(f,f)", false, Fn._any([false, false]));
		Asserts.assertEquals("_any(f)", false, Fn._any([false]));
		Asserts.assertEquals("_any(t)", true, Fn._any([true]));
		Asserts.assertEquals("_any([])", false, Fn._any(new sequence<boolean>));
		Asserts.assertEquals("_any([<any>])", false, Fn._any(new sequence<any>));
	}

	action replaceWithCows(any a) returns string { return "cow"; }
	action replaceValueWithCows(string k, any v) returns string { return "cow"; }
	action checkForCow(string s) returns boolean { return s = "cow"; }
	action checkValueForCow(string k, string v) returns boolean { return v = "cow"; }
	action addup(float acc, integer value) returns float { return acc+value.toFloat(); }
	action stringify(string acc, string k, integer v) returns string { return acc+k+":"+v.toString()+", "; }
	action isEven(integer i) returns boolean { return i%2=0; }
	action double(integer i) returns integer { return i*2; }
	action addCow(string s) returns string { return s+"cow"; }
	action countCows(string s) returns integer
	{
		integer i := 0;
		integer offs := -1;
		while true {
			offs := s.findFrom("cow", offs+1);
			if offs < 0 { break; }
			i := i + 1;
		}
		return i;
	}
}

